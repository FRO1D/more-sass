/**
 * [EN]
 * Shorthand for writing font-* rules in syntax like vanilla CSS "font" property,
 * but without specifying required font-family property.
 * Note: parameters should be quoted to prevent SASS evaluation.
 *
 * [RU]
 * Краткое свойство для указания font-* свойств в синтаксисе ванильного свойства "font",
 * но без необходимости обязательно указывать "font-family".
 * Важно: параметры должны быть заключены в кавычки, чтобы предотвратить выполнение SASS-операций.
 *
 * [Example]
 * .block {
 *   @include font('48px/1.2');
 * }
 *
 * @param      {String}  $params  - The parameters according to CSS font rule.
 */

@use 'sass:string';
@use '../../variables' as v;
@use '../../functions' as f;

@mixin font($params, $font-family: null) {
	$font-style:  null;
	$font-weight: null;
	$font-size:   null;
	$line-height: null;

	$list: f.str-split($params, ' ');

	@each $param in $list {
		// Font-weight
		@if (f.list-includes(v.$font-weight-values, $param)) {
			$font-weight: $param;
		} @else {
			// Font-style
			@if (f.list-includes(v.$font-style-values, $param)) {
				$font-style: $param;
			} @else {
				// Font-size
				@if (f.list-includes-substring(v.$css-units, $param) or string.index($param, '/')) {
					// Font-size and line-height both
					@if (string.index($param, '/')) {
						// Just line-height
						@if (string.index($param, '/') == 1) {
							$line-height: string.slice($param, 2);
						} @else {
							$temp: f.str-split($param, '/');
							$font-size: nth($temp, 1);
							$line-height: nth($temp, 2);
						}
					} @else {
						// Only font-size
						$font-size: $param;
					}
				} @else { // Otherwise it's font-family
					$font-family: if($font-family == null, $param, $font-family + ' ' + $param);
				}
			}
		}
	}

	font-family: $font-family;
	font-size: $font-size;
	line-height: $line-height;
	font-style: $font-style;
	font-weight: $font-weight;
}

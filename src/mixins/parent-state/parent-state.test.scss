/* stylelint-disable max-nesting-depth */
@use 'true' as *; // sass-true
@use './parent-state.scss' as *;

@include describe('Mixins') {
	@include describe('parent-state') {
		@include it('Works correctly with the element\'s pseudo-elements') {
			@include assert {
				@include output {
					.element {
						&::after {
							@include parent-state(':hover') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					.element:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with nested elements\' pseudo-elements') {
			@include assert {
				@include output {
					.parent {
						.child {
							&::after {
								@include parent-state(':hover') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					.parent .child:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with siblings elements\' pseudo-elements') {
			@include assert {
				@include output {
					.element {
						+ .sibling {
							&::after {
								@include parent-state(':hover') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					.element + .sibling:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with modified elements\' pseudo-elements') {
			@include assert {
				@include output {
					.element {
						&.modifier {
							&::after {
								@include parent-state(':hover') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					.element.modifier:hover::after {
						color: #ff0000;
					}
				}
			}

			@include assert {
				@include output {
					.parent {
						.child {
							&.modifier {
								&::after {
									@include parent-state(':hover') {
										color: #ff0000;
									}
								}
							}
						}
					}
				}

				@include expect {
					.parent .child.modifier:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with BEM methodology') {
			@include assert {
				@include output {
					.block {
						&__element {
							&::after {
								@include parent-state(':hover') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					.block__element:hover::after {
						color: #ff0000;
					}
				}
			}

			@include assert {
				@include output {
					.block {
						&__element {
							&--modifier {
								&::after {
									@include parent-state(':hover') {
										color: #ff0000;
									}
								}
							}
						}
					}
				}

				@include expect {
					.block__element--modifier:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with multiple parent states') {
			@include assert {
				@include output {
					.element {
						&::after {
							@include parent-state(':hover', '.is-active') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					.element:hover::after,
					.element.is-active::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with old syntax of pseudo-elements') {
			@include assert {
				@include output {
					.element {
						&::after {
							@include parent-state(':hover') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					.element:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with composite selectors') {
			@include assert {
				@include output {
					.element {
						&::before, &::after {
							@include parent-state(':hover') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					.element:hover::before, .element:hover::after {
						color: #ff0000;
					}
				}
			}
		}

		@include it('Works correctly with composite selectors and multiple state modifiers') {
			@include assert {
				@include output {
					.element {
						&::before, &::after {
							@include parent-state(':hover', '.is-fixed', '--active') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					.element:hover::before, .element.is-fixed::before, .element--active::before,
					.element:hover::after, .element.is-fixed::after, .element--active::after {
						color: #ff0000;
					}
				}
			}
		}
	}
}

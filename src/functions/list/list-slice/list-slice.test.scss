@use 'true' as *; // sass-true
@use './list-slice.scss' as *;
@use 'sass:list';
@use 'sass:meta';

@include describe('Functions') {
	@include describe('list-slice') {
		@include it('Returns the slice of the input list') {
			@include assert-equal(list-slice((1, 2, 3, 4, 5), 3), (3, 4, 5));
			@include assert-equal(list-slice((1, 2, 3, 4, 5), 2, 4), (2, 3, 4));
		}

		@include it('Works correctly with negative start and/or end values') {
			@include assert-equal(list-slice((1, 2, 3, 4, 5), -4, -2), (2, 3, 4));
		}

		@include it('Returns a list consist of the only element if start and end values are equal') {
			$output: list-slice((1, 2, 3, 4, 5), 3, 3);

			@include assert-true(meta.type-of($output) == 'list');
			@include assert-true(list.length($output) == 1);
			@include assert-equal(list.nth($output, 1), 3);
		}

		@include it('Returns the empty input list as is') {
			@include assert-equal(list-slice((), 1, -1), ());
			@include assert-equal(list-slice((), 1, 2), ());
			@include assert-equal(list-slice((), -2, -1), ());
			@include assert-equal(list-slice((), 1, 1), ());
		}

		@include it('Returns empty list if end value is less than start value') {
			@include assert-equal(list-slice((1, 2, 3, 4, 5), 3, 2), ());
			@include assert-equal(list-slice((1, 2, 3, 4, 5), -2, -3), ());
		}

		@include it('Returns empty list if start value is out of the input list but less than end value') {
			@include assert-equal(list-slice((1, 2, 3, 4, 5), 10, 20), ());
			@include assert-equal(list-slice((1, 2, 3, 4, 5), -20, -10), ());
		}

		@include it('Returns empty list if start and end values are equal and out of the input list') {
			@include assert-equal(list-slice((1, 2, 3, 4, 5), 10, 10), ());
		}
	}
}
